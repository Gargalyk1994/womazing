{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://B%3A/GB%20my%20work/Next.js/womazing/prisma/prisma.ts"],"sourcesContent":["// prisma.ts\r\nimport { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prismaClientSingleton = () => {\r\n    return new PrismaClient();\r\n};\r\n\r\ndeclare global {\r\n    var prismaGlobal: undefined | ReturnType<typeof prismaClientSingleton>;\r\n}\r\n\r\nexport const prisma = globalThis.prismaGlobal ?? prismaClientSingleton();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalThis.prismaGlobal = prisma;\r\n"],"names":[],"mappings":"AAAA,YAAY;;;;AACZ;;AAEA,MAAM,wBAAwB;IAC1B,OAAO,IAAI,6HAAA,CAAA,eAAY;AAC3B;AAMO,MAAM,SAAS,WAAW,YAAY,IAAI;AAEjD,wCAA2C,WAAW,YAAY,GAAG","debugId":null}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file://B%3A/GB%20my%20work/Next.js/womazing/shared/lib/find-or-create-cart.ts"],"sourcesContent":["import { prisma } from \"@/prisma/prisma\";\r\n\r\nexport const findOrCreateCart = async (token: string) => {\r\n    let userCart = await prisma.cart.findFirst({\r\n        where: {\r\n            token,\r\n        },\r\n    });\r\n\r\n    if (!userCart) {\r\n        userCart = await prisma.cart.create({\r\n            data: {\r\n                token,\r\n            },\r\n        });\r\n    }\r\n\r\n    return userCart;\r\n};\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,mBAAmB,OAAO;IACnC,IAAI,WAAW,MAAM,kHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACvC,OAAO;YACH;QACJ;IACJ;IAEA,IAAI,CAAC,UAAU;QACX,WAAW,MAAM,kHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAChC,MAAM;gBACF;YACJ;QACJ;IACJ;IAEA,OAAO;AACX","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file://B%3A/GB%20my%20work/Next.js/womazing/shared/lib/calc-cart-item-total-price.ts"],"sourcesContent":["import { CartItemDTO } from \"../services/cart-dto\";\r\n\r\n\r\n/**\r\n * Функция подсчета общей стоимости вариации одного продукта учитывая его количество в корзине\r\n * @param item -полученный от сервера и преобразованный обьект корзины\r\n * @returns \r\n */\r\nexport const calcCartItemTotalPrice = (item: CartItemDTO): number => {\r\n    return  item.productItem.price * item.quantity;\r\n};\r\n"],"names":[],"mappings":";;;AAQO,MAAM,yBAAyB,CAAC;IACnC,OAAQ,KAAK,WAAW,CAAC,KAAK,GAAG,KAAK,QAAQ;AAClD","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file://B%3A/GB%20my%20work/Next.js/womazing/shared/lib/update-cart-total-amount.ts"],"sourcesContent":["import { prisma } from \"@/prisma/prisma\";\r\nimport { calcCartItemTotalPrice } from \"./calc-cart-item-total-price\";\r\n\r\nexport const updateCartTotalAmount = async (token: string) => {\r\n    const userCart = await prisma.cart.findFirst({\r\n        where: {\r\n            token,\r\n        },\r\n        include: {\r\n            cartItems: {\r\n                orderBy: {\r\n                    createdAt: \"desc\",\r\n                },\r\n                include: {\r\n                    productItem: {\r\n                        include: {\r\n                            product: true,\r\n                        },\r\n                    }\r\n                },\r\n            },\r\n        },\r\n    });\r\n\r\n    if (!userCart) {\r\n        return;\r\n    }\r\n\r\n    const totalAmount = userCart.cartItems.reduce((acc, item) => {\r\n        return acc + calcCartItemTotalPrice(item);\r\n    }, 0);\r\n\r\n    return await prisma.cart.update({\r\n        where: {\r\n            id: userCart.id,\r\n        },\r\n        data: {\r\n            totalAmount,\r\n        },\r\n        include: {\r\n            cartItems: {\r\n                orderBy: {\r\n                    createdAt: \"desc\",\r\n                },\r\n                include: {\r\n                    productItem: {\r\n                        include: {\r\n                            product: true,\r\n                        },\r\n                    }\r\n                },\r\n            },\r\n        },\r\n    });\r\n};\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,wBAAwB,OAAO;IACxC,MAAM,WAAW,MAAM,kHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACzC,OAAO;YACH;QACJ;QACA,SAAS;YACL,WAAW;gBACP,SAAS;oBACL,WAAW;gBACf;gBACA,SAAS;oBACL,aAAa;wBACT,SAAS;4BACL,SAAS;wBACb;oBACJ;gBACJ;YACJ;QACJ;IACJ;IAEA,IAAI,CAAC,UAAU;QACX;IACJ;IAEA,MAAM,cAAc,SAAS,SAAS,CAAC,MAAM,CAAC,CAAC,KAAK;QAChD,OAAO,MAAM,CAAA,GAAA,yJAAA,CAAA,yBAAsB,AAAD,EAAE;IACxC,GAAG;IAEH,OAAO,MAAM,kHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QAC5B,OAAO;YACH,IAAI,SAAS,EAAE;QACnB;QACA,MAAM;YACF;QACJ;QACA,SAAS;YACL,WAAW;gBACP,SAAS;oBACL,WAAW;gBACf;gBACA,SAAS;oBACL,aAAa;wBACT,SAAS;4BACL,SAAS;wBACb;oBACJ;gBACJ;YACJ;QACJ;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file://B%3A/GB%20my%20work/Next.js/womazing/app/api/cart/route.ts"],"sourcesContent":["import { prisma } from \"@/prisma/prisma\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport crypto from \"crypto\";\r\nimport { findOrCreateCart } from \"@/shared/lib/find-or-create-cart\";\r\nimport { CreateCartItemValues } from \"@/shared/services/cart-dto\";\r\nimport { updateCartTotalAmount } from \"@/shared/lib/update-cart-total-amount\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n    try {\r\n        const token = req.cookies.get(\"cartToken\")?.value;\r\n\r\n        if (!token) {\r\n            return NextResponse.json({ totalAmount: 0, items: [] });\r\n        }\r\n\r\n        const userCart = await prisma.cart.findFirst({\r\n            where: {\r\n                OR: [\r\n                    {\r\n                        token,\r\n                    },\r\n                ],\r\n            },\r\n            include: {\r\n                cartItems: {\r\n                    orderBy: {\r\n                        createdAt: \"desc\",\r\n                    },\r\n                    include: {\r\n                        productItem: {\r\n                            include: {\r\n                                product: true,\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n\r\n        return NextResponse.json(userCart);\r\n    } catch (error) {\r\n        console.log(\"[CART_GET] Server error\", error);\r\n        return NextResponse.json(\r\n            { message: \"Не удалось получить корзину\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n    try {\r\n        let token = req.cookies.get(\"cartToken\")?.value;\r\n\r\n        if (!token) {\r\n            token = crypto.randomUUID();\r\n        }\r\n\r\n        const userCart = await findOrCreateCart(token);\r\n\r\n        const data = (await req.json()) as CreateCartItemValues;\r\n\r\n        const findCartItem = await prisma.cartItem.findFirst({\r\n            where: {\r\n                cartId: userCart.id,\r\n                productItemId: data.productItemId,\r\n            },\r\n        });\r\n\r\n        // Если товар был найден, делаем +1\r\n        if (findCartItem) {\r\n            await prisma.cartItem.update({\r\n                where: {\r\n                    id: findCartItem.id,\r\n                },\r\n                data: {\r\n                    quantity: findCartItem.quantity + 1,\r\n                },\r\n            });\r\n        } else {\r\n            await prisma.cartItem.create({\r\n                data: {\r\n                    cartId: userCart.id,\r\n                    productItemId: data.productItemId,\r\n                    quantity: 1,\r\n                },\r\n            });\r\n        }\r\n\r\n        const updatedUserCart = await updateCartTotalAmount(token);\r\n\r\n        const resp = NextResponse.json(updatedUserCart);\r\n        resp.cookies.set(\"cartToken\", token);\r\n        return resp;\r\n    } catch (error) {\r\n        console.log(\"[CART_POST] Server error\", error);\r\n        return NextResponse.json(\r\n            { message: \"Не удалось создать корзину\" },\r\n            { status: 500 }\r\n        );\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAEO,eAAe,IAAI,GAAgB;IACtC,IAAI;QACA,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc;QAE5C,IAAI,CAAC,OAAO;YACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,aAAa;gBAAG,OAAO,EAAE;YAAC;QACzD;QAEA,MAAM,WAAW,MAAM,kHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACzC,OAAO;gBACH,IAAI;oBACA;wBACI;oBACJ;iBACH;YACL;YACA,SAAS;gBACL,WAAW;oBACP,SAAS;wBACL,WAAW;oBACf;oBACA,SAAS;wBACL,aAAa;4BACT,SAAS;gCACL,SAAS;4BACb;wBACJ;oBACJ;gBACJ;YACJ;QACJ;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,2BAA2B;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,SAAS;QAA8B,GACzC;YAAE,QAAQ;QAAI;IAEtB;AACJ;AAEO,eAAe,KAAK,GAAgB;IACvC,IAAI;QACA,IAAI,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc;QAE1C,IAAI,CAAC,OAAO;YACR,QAAQ,qGAAA,CAAA,UAAM,CAAC,UAAU;QAC7B;QAEA,MAAM,WAAW,MAAM,CAAA,GAAA,+IAAA,CAAA,mBAAgB,AAAD,EAAE;QAExC,MAAM,OAAQ,MAAM,IAAI,IAAI;QAE5B,MAAM,eAAe,MAAM,kHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;YACjD,OAAO;gBACH,QAAQ,SAAS,EAAE;gBACnB,eAAe,KAAK,aAAa;YACrC;QACJ;QAEA,mCAAmC;QACnC,IAAI,cAAc;YACd,MAAM,kHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;gBACzB,OAAO;oBACH,IAAI,aAAa,EAAE;gBACvB;gBACA,MAAM;oBACF,UAAU,aAAa,QAAQ,GAAG;gBACtC;YACJ;QACJ,OAAO;YACH,MAAM,kHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;gBACzB,MAAM;oBACF,QAAQ,SAAS,EAAE;oBACnB,eAAe,KAAK,aAAa;oBACjC,UAAU;gBACd;YACJ;QACJ;QAEA,MAAM,kBAAkB,MAAM,CAAA,GAAA,oJAAA,CAAA,wBAAqB,AAAD,EAAE;QAEpD,MAAM,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAC/B,KAAK,OAAO,CAAC,GAAG,CAAC,aAAa;QAC9B,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,4BAA4B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,SAAS;QAA6B,GACxC;YAAE,QAAQ;QAAI;IAEtB;AACJ","debugId":null}}]
}