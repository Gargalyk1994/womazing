
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = env("POSTGRES_URL")
}

model User {
    id Int @id @default(autoincrement())
    fullName String
    email String @unique
    password String

    cart Cart?//у User может быть и может не быть Cart
    order Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())
    totalAmount Int @default(0)

    user User? @relation(fields: [userId], references: [id])//создаем связь с User(one to one)
    userId Int? @unique

    cartItems CartItem[]

    token String? //токен для неаторизованного пользователя

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
} 

model CartItem {
    id Int @id @default (autoincrement())
    quantity Int

    cart Cart @relation (fields: [cartId], references: [id])
    cartId Int

    productItem ProductItem @relation (fields: [productItemId], references: [id])
    productItemId Int

    createdAt DateTime @default (now())
    updatedAt DateTime @updatedAt
}

model Category {
    id Int @id @default(autoincrement())
    name String @unique

    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())
    name String
    image String
    alt String

    items ProductItem[]

    category Category @relation(fields: [categoryId], references: [id])//создаем связь с Category
    categoryId Int

    breadcrumb BreadcrumbsItems?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductItem{ // вариации Product
    id Int @id @default(autoincrement())
    price Int
    oldPrice Int?
    size Int
    color Int

    product Product @relation(fields: [productId], references: [id]) // создаем связь с Product(one to many)
    productId Int
    
    cartItemId CartItem[]//у ProductItem может быть множество CartItem

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Page {
    id        Int    @id @default(autoincrement())
    title     String
    slug      String @unique
    parentId  Int?   // Ссылка на родительскую страницу
    parent    Page?  @relation("PageHierarchy", fields: [parentId], references: [id])
    children  Page[] @relation("PageHierarchy")
}

model Crumbs{
    id Int @id @default(autoincrement())
    text String
    url String

    breadcrumbs BreadcrumbsItems @relation(fields: [breadcrumbsId], references: [id])
    breadcrumbsId Int 

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BreadcrumbsItems{
    id Int @id @default(autoincrement())
    title String
    namePage String

    crumbs Crumbs[]
    
    product Product @relation(fields: [productId], references: [id])//создаем связь с Product(one to one)
    productId Int @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default (autoincrement())
    token String //токен для неаторизованного пользователя
    totalAmount Int
    status OrderStatus
    paymentId String?
    items Json
    fullName String
    email String
    phone String
    address String 
    comment String?

    User User? @relation (fields: [userId], references: [id])
    userId Int?
}

model VerificationCode {
    id Int @id @default(autoincrement())
    code String @unique
    
    User User @relation(fields: [userId], references: [id])
    userId Int @unique

    createdAt DateTime @default (now())
}

enum OrderStatus {
    PENDING//оформлен но не оплачен
    SUCCEEDED// оплачен
    CANCELED// отменен, не выполнен
}